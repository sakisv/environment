# .bashrc

[[ -f "/home/linuxbrew/.linuxbrew/bin/brew" ]] && eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv)
[[ -f "/opt/homebrew/bin/brew" ]] && eval "$(/opt/homebrew/bin/brew shellenv)"

osname=`uname -s`
if [ $osname == 'Darwin' ]; then
    if [ $(uname -p) == 'i386' ]; then
        PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"
    elif [ $(uname -p) == 'arm' ]; then
        PATH="/opt/homebrew/opt/coreutils/libexec/gnubin:$PATH"
    fi
fi

# Source global definitions
if [ -f /etc/bashrc ]; then
    . /etc/bashrc
fi

export TERM=xterm-256color

export EDITOR=nvim

#
# History stuff
#

# don't put duplicate lines in the history. See bash(1) for more options
# don't overwrite GNU Midnight Commander's setting of `ignorespace'.
HISTCONTROL=$HISTCONTROL${HISTCONTROL+:}ignoredups
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoreboth

# Not everything deserves to be written in history
export HISTIGNORE="exit:ls:ll:fg:history:cl:clear"

# Store time in format: YYYY-MM-DD HH:MM:SS
HISTTIMEFORMAT="%F %T "

# append to the history file, don't overwrite it
shopt -s histappend

# Note: for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=10000
HISTFILESIZE=20000

# when pressing tab, ignore .hidden files (http://askubuntu.com/a/190773)
if [[ $(which bind) ]]; then
    bind 'set match-hidden-files off'
fi


#
# Color prompt stuff
#

#------------------------------------------////
# tput colors:
#------------------------------------------////

# Action                    Parameters
# Set background color      tput setab [color]
# Set foreground color      tput setaf [color]
# Set bold mode             tput bold
# Set half-bright mode      tput dim
# Set underline mode        tput smul
# Exit underline mode       tput rmul
# Reverse mode              tput rev
# Set standout mode         tput smso
# Exit standout mode        tput rmso
# Reset all attributes      tput sgr0

# Color    Code
# Black     0
# Red       1
# Green     2
# Yellow    3
# Blue      4
# Magenta   5
# Cyan      6
# White     7


# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
    # We have color support; assume it's compliant with Ecma-48
    # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
    # a case would tend to support setf rather than setaf.)
        color_prompt=yes
    else
        color_prompt=
    fi
fi

export COLOR_PROMPT=$color_prompt

#
# Load git-prompt && git-completion
#

if [ -f ~/.git-completion.bash ]; then
    source ~/.git-completion.bash
fi

if [ -f ~/.git-prompt.sh ]; then
    source ~/.git-prompt.sh
    export GIT_PS1_SHOWDIRTYSTATE=1
    git_ps1_exists=1
fi

if [ "$COLOR_PROMPT" = yes ]; then
    prompt='\[$(tput bold)\]'
    prompt+='\[$(tput setaf 0)\][\t] ' # [HH:MM:SS]
    prompt+='\[$(tput sgr0)\]'
    prompt+='\[$(tput bold)\]'
    prompt+='\[$(tput setaf 2)\]\u'    # user
    prompt+='\[$(tput setaf 7)\]@'     # @
    prompt+='\[$(tput setaf 1)\]\h'    # host
    prompt+='\[$(tput setaf 7)\]:'     # :
    prompt+='\[$(tput setaf 4)\]\w'    # working dir
    if [ "$git_ps1_exists" = "1" ]; then
        prompt+='\[$(tput setaf 3)\]$(__git_ps1)'
    fi
    prompt+='\[$(tput sgr0)\]'
    prompt+='\n$ '
    export PS1=$prompt
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi

agent_sock=$(gpgconf --list-dirs agent-socket)
export GPG_AGENT_INFO=${agent_sock}:0:1
if [ -n "$(gpgconf --list-options gpg-agent | awk -F: '/^enable-ssh-support:/{ print $10 }')" ]; then
    export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)
fi
export GPG_TTY=$(tty)
gpg-connect-agent updatestartuptty /bye

if ! echo "$PATH" | grep -Eq "(^|:)/usr/local/go/bin($|:)"
then
    export PATH=$PATH:/usr/local/go/bin
fi
if ! echo "$PATH" | grep -Eq "(^|:)$HOME/go/bin($|:)"
then
    export PATH=$PATH:$HOME/go/bin
fi

#
# Load any other stuff
#

EXTRAS=(
    "${HOME}/.bash_aliases"
    "${HOME}/.notes"
)
for i in ${EXTRAS[@]}; do
    if [[ -f ${i} ]]; then . ${i}; fi
done

complete -W "\`grep -oE '^[a-zA-Z0-9_-]+:([^=]|$)' Makefile | sed 's/[^a-zA-Z0-9_-]*$//'\`" make
eval "$(direnv hook bash)"
export PATH=$HOME/.tfenv/bin:$PATH

[ -f ~/.fzf.bash ] && source ~/.fzf.bash
[ -f ~/z.sh ] && source ~/z.sh


complete -C /usr/local/bin/nomad nomad
_fly_compl() {
    args=("${COMP_WORDS[@]:1:$COMP_CWORD}")
    local IFS=$'\n'
    COMPREPLY=($(GO_FLAGS_COMPLETION=1 ${COMP_WORDS[0]} "${args[@]}"))
    return 0
}
complete -F _fly_compl fly

[[ $(which kubectl) ]] && source <(kubectl completion bash)

if [[ $(which gds ) ]]; then
    : ${PROG:=gds}

    _cli_bash_autocomplete() {
        local cur opts base
        COMPREPLY=()
        cur="${COMP_WORDS[COMP_CWORD]}"
        opts=$( ${COMP_WORDS[@]:0:$COMP_CWORD} --generate-bash-completion )
        optsa=($opts)
        if [ "${optsa[0]}" == 'prefix' ]; then
          i=${optsa[1]}
          local root_command=${COMP_WORDS[$i]}
          _command_offset $i
        else
          COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        fi
        return 0
    }

    complete -F _cli_bash_autocomplete $PROG

    unset PROG
fi
